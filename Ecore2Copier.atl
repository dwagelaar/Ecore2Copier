-- @atlcompiler emftvm
-- @nsURI ECORE=http://www.eclipse.org/emf/2002/Ecore
-- @nsURI ATL=http://www.eclipse.org/gmt/2005/ATL
module Ecore2Copier;
create OUT : ATL from IN : ECORE;

--- Returns the root EPackage of the input model (i.e. the EPackage without a super-package).
helper def : rootPackage : ECORE!EPackage =
	ECORE!EPackage.allInstances()
		->any(p | p.eSuperPackage.oclIsUndefined());

--- Converts the first character to uppercase.
helper context String def : firstToUpper : String =
	if self.size() > 1 then
		self.substring(1, 1).toUpper() + self.substring(2, self.size())
	else
		self.toUpper()
	endif;

--- Returns whether this EStructuralFeature can/should be assigned to.
helper context ECORE!EStructuralFeature def : assignable : Boolean =
	not (self."derived" or self.transient) and self.changeable;

--- Returns whether this EStructuralFeature can/should be assigned to.
helper context ECORE!EReference def : assignable : Boolean =
	super.assignable and not self.container;

rule RootPackage2Module {
	from
		s : ECORE!EPackage (
			s = thisModule.rootPackage
		)
	to
		t : ATL!Module (
			commentsBefore <- Sequence{
					'-- @atlcompiler emftvm',
					'-- @nsURI ' + s.name.toUpper() + '=' + s.nsURI,
					'-- Generated by Ecore2Copier.atl'
				},
			name <- s.name.firstToUpper + 'Copy',
			inModels <- Sequence{inModel},
			outModels <- Sequence{outModel},
			elements <- ECORE!EClass.allInstances()
		),
		metaModel : ATL!OclModel (
			name <- s.name.toUpper()
		),
		inModel : ATL!OclModel (
			name <- 'IN',
			metamodel <- metaModel
		),
		outModel : ATL!OclModel (
			name <- 'OUT',
			metamodel <- metaModel
		)
}

rule EClass2Rule {
	from
		s : ECORE!EClass
	to
		t : ATL!MatchedRule (
			commentsBefore <- Sequence{
					'-- @extends ' + 
					s.eSuperTypes
						->collect(st | st.name)
						->iterate(n; acc: String = '' |
							if acc.size() = 0 then n else acc + ', ' + n endif)
				},
			name <- s.name,
			isAbstract <- s."abstract",
			inPattern <- inPattern,
			outPattern <- outPattern
		),
		inPattern : ATL!InPattern (
			elements <- Sequence{inElement}
		),
		outPattern : ATL!OutPattern (
			elements <- Sequence{outElement}
		),
		inElement : ATL!SimpleInPatternElement (
			varName <- 's',
			type <- thisModule.EClass2OclModelElement(s)
		),
		outElement : ATL!SimpleOutPatternElement (
			varName <- 't',
			type <- thisModule.EClass2OclModelElement(s),
			bindings <- s.eStructuralFeatures->select(f | f.assignable)
		)
}

rule EStructuralFeature2Binding {
	from
		s : ECORE!EStructuralFeature
	to
		t : ATL!Binding (
			propertyName <- s.name,
			value <- valueExp
		),
		valueExp : ATL!NavigationOrAttributeCallExp (
			source <- sourceExp,
			name <- s.name
		),
		sourceExp : ATL!VariableExp (
			referredVariable <- thisModule.resolveTemp(s.eContainingClass, 'inElement')
		)
}

lazy rule EClass2OclModelElement {
	from
		s : ECORE!EClass
	to
		t : ATL!OclModelElement (
			name <- s.name,
			model <- thisModule.resolveTemp(thisModule.rootPackage, 'metaModel')
		)
}

